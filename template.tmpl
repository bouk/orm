package {{.Package}}

import (
	"context"
	"database/sql"
	"fmt"

	"bou.ke/orm/rel"
)
{{range .Tables}}
type {{.StructName}} struct { {{range .Columns}}
	// {{.FieldName}} ...
	{{.FieldName}} {{.Type}}
{{end}}

	orm struct {
		// If true, then this record exists in the DB
		existingRecord bool
		deleted        bool

		old struct { {{range .Columns}}
      // {{.FieldName}} ...
      {{.FieldName}} {{.Type}}
{{end}}
		}
	}
}
{{$table := .}}{{range .HasMany}}
func (o *{{$table.StructName}}) {{.RelationName}}() {{.StructName}}Relation {
	return {{.RelationName}}().Where("{{$table.Singular}}_id", o.ID)
}
{{end}}
{{$table := .}}{{range .BelongsTo}}
func (o *{{$table.StructName}}) {{.StructName}}(ctx context.Context) (*{{.StructName}}, error) {
	return {{.RelationName}}().Find(ctx, o.{{.StructName}}ID)
}
{{end}}

func (o *{{.StructName}}) Save(ctx context.Context) error {
  if o.orm.deleted {
    return fmt.Errorf("record deleted")
  }

	db := getDB(ctx)
	if o.orm.existingRecord {
		stmt := &rel.UpdateStatement{
			Table: "users",
			Wheres: []rel.Expr{
        &rel.Equality{
          Field: "id",
          Expr:  &rel.BindParam{Value: o.orm.old.ID},
        },
      },
		}

{{range .Columns}}
    if o.{{.FieldName}} != o.orm.old.{{.FieldName}} {
      stmt.Values = append(stmt.Values, &rel.Assignment{
        Column: {{.Name | printf "%q"}},
				Value: &rel.BindParam{
          Value: o.{{.FieldName}},
				},
      })
    }
{{end}}

		query, values := stmt.Build()
		_, err := db.ExecContext(ctx, query, values...)
		if err != nil {
			return err
		}
	} else {
		stmt := &rel.InsertStatement{
			Table: "users",
		}
    {{range .Columns}}{{if eq .Name "id"}}
    if o.{{.FieldName}} != 0 { {{end}}
    stmt.Columns = append(stmt.Columns, {{.Name | printf "%q"}})
    stmt.Values = append(stmt.Values, &rel.BindParam{
        Value: o.{{.FieldName}},
    }){{if eq .Name "id"}}
    }{{end}}{{end}}

		query, values := stmt.Build()
		res, err := db.ExecContext(ctx, query, values...)
		if err != nil {
			return err
		}
		o.orm.existingRecord = true

    if o.ID == 0 {
      o.ID, err = res.LastInsertId()
      if err != nil {
        return err
      }
    }
	}

  {{range .Columns}}
  o.orm.old.{{.FieldName}} = o.{{.FieldName}}{{end}}

  return nil
}

func (o *{{.StructName}}) Delete(ctx context.Context) error {
	_, err := {{.RelationName}}().Where("id", o.ID).DeleteAll(ctx)
	if err != nil {
		return err
	}
  o.orm.deleted = true
	return err
}

func (o *{{.StructName}}) fieldPointerForColumn(column string) interface{} {
	switch column { {{range .Columns}}
	case "{{.Name}}":
		return &o.{{.FieldName}}{{end}}
	default:
		return nil
	}
}

func (o *{{.StructName}}) pointersForFields(fields []string) ([]interface{}, error) {
	pointers := make([]interface{}, len(fields))
	for i, field := range fields {
		ptr := o.fieldPointerForColumn(field)
		if ptr == nil {
			return nil, fmt.Errorf("unknown column %q", field)
		}
		pointers[i] = ptr
	}
	return pointers, nil
}

type {{.StructName}}Relation interface {
	All(ctx context.Context) ([]*{{.StructName}}, error)
	Count(ctx context.Context) (int64, error)
  // Create
	DeleteAll(ctx context.Context) (int64, error)
	Find(ctx context.Context, id int64) (*{{.StructName}}, error)
	FindBy(ctx context.Context, query string, args ...interface{}) (*{{.StructName}}, error)
	First(ctx context.Context) (*{{.StructName}}, error)
	Last(ctx context.Context) (*{{.StructName}}, error)
	Limit(limit int64) {{.StructName}}Relation
	Offset(offset int64) {{.StructName}}Relation
	Order(query string, args ...string) {{.StructName}}Relation
	Select(fields ...string) {{.StructName}}Relation
	Take(ctx context.Context) (*{{.StructName}}, error)
	Where(query string, args ...interface{}) {{.StructName}}Relation
}

func {{.RelationName}}() {{.StructName}}Relation {
	return &{{.Singular}}Relation{}
}

type {{.Singular}}Relation struct {
	fields      []string
	whereClause []rel.Expr
	orderValues []rel.Expr
	limit       int64
	offset      int64
}

func (q *{{.Singular}}Relation) buildQuery(fields []string) (query string, args []interface{}) {
	columns := make([]rel.Expr, 0, len(fields))
	for _, field := range fields {
		columns = append(columns, &rel.Literal{Value: field})
	}
	s := rel.SelectStatement{
		Columns: columns,
		Table:   "{{.Name}}",
		Wheres:  q.whereClause,
		Orders:  q.orderValues,
		Limit:   q.limit,
		Offset:  q.offset,
	}
	return s.Build()
}

func (q *{{.Singular}}Relation) queryRow(ctx context.Context, fields []string, dest []interface{}) error {
	db := getDB(ctx)
	query, args := q.buildQuery(fields)

	return db.QueryRowContext(ctx, query, args).Scan(dest...)
}

func (q *{{.Singular}}Relation) query(ctx context.Context, fields []string) (*sql.Rows, error) {
	db := getDB(ctx)
	query, args := q.buildQuery(fields)

	return db.QueryContext(ctx, query, args)
}

func (q *{{.Singular}}Relation) Count(ctx context.Context) (int64, error) {
	var count int64
	err := q.queryRow(ctx, []string{"COUNT(*)"}, []interface{}{&count})
	return count, err
}

func (q *{{.Singular}}Relation) DeleteAll(ctx context.Context) (int64, error) {
	s := rel.DeleteStatement{
		Table:   "{{.Name}}",
		Wheres:  q.whereClause,
	}

	query, args := s.Build()

	db := getDB(ctx)
  res, err := db.ExecContext(ctx, query, args...)
  if err != nil {
		return 0, err
  }
  return res.RowsAffected()
}

func (q *{{.Singular}}Relation) Where(query string, args ...interface{}) {{.StructName}}Relation {
	if len(args)%2 != 1 {
		panic("invalid where call")
	}

	q.whereClause = append(q.whereClause, &rel.Equality{
		Field: query,
		Expr:  &rel.BindParam{Value: args[0]},
	})

	for i := 1; i <= len(args); i += 2 {
		q.whereClause = append(q.whereClause, &rel.Equality{
			Field: args[i].(string),
			Expr:  &rel.BindParam{Value: args[i+1]},
		})
	}

	return q
}

func (q *{{.Singular}}Relation) Limit(limit int64) {{.StructName}}Relation {
	q.limit = limit
	return q
}

func (q *{{.Singular}}Relation) Select(fields ...string) {{.StructName}}Relation {
	q.fields = append(q.fields, fields...)
	return q
}

func (q *{{.Singular}}Relation) Offset(offset int64) {{.StructName}}Relation {
	q.offset = offset
	return q
}

func (q *{{.Singular}}Relation) columnFields() []string {
	if q.fields == nil {
		return []string{ {{range .Columns}}
			"{{.Name}}",{{end}}
		}
	} else {
		return q.fields
	}
}

func (q *{{.Singular}}Relation) All(ctx context.Context) ([]*{{.StructName}}, error) {
	var {{.Name}} []*{{.StructName}}

	fields := q.columnFields()
	rows, err := q.query(ctx, fields)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	row := &{{.StructName}}{}
  row.orm.existingRecord = true
	ptrs, err := row.pointersForFields(fields)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		if err := rows.Scan(ptrs...); err != nil {
			return nil, err
		}

		o := &{{.StructName}}{}
		*o = *row

    {{range .Columns}}
    o.orm.old.{{.FieldName}} = o.{{.FieldName}}{{end}}

		{{.Name}} = append({{.Name}}, o)
	}

	return {{.Name}}, rows.Err()
}

func (q *{{.Singular}}Relation) Take(ctx context.Context) (*{{.StructName}}, error) {
	fields := q.columnFields()

	o := &{{.StructName}}{}
  o.orm.existingRecord = true
	ptrs, err := o.pointersForFields(fields)
	if err != nil {
		return nil, err
	}

  q.limit = 1
	err = q.queryRow(ctx, fields, ptrs)
  {{range .Columns}}
  o.orm.old.{{.FieldName}} = o.{{.FieldName}}{{end}}

	return o, err
}

func (q *{{.Singular}}Relation) Find(ctx context.Context, id int64) (*{{.StructName}}, error) {
	return q.FindBy(ctx, "id", id)
}

func (q *{{.Singular}}Relation) FindBy(ctx context.Context, query string, args ...interface{}) (*{{.StructName}}, error) {
	return q.Where(query, args...).Take(ctx)
}

func (q *{{.Singular}}Relation) First(ctx context.Context) (*{{.StructName}}, error) {
	return q.Order("id", "ASC").Take(ctx)
}

func (q *{{.Singular}}Relation) Last(ctx context.Context) (*{{.StructName}}, error) {
	return q.Order("id", "DESC").Take(ctx)
}

func (q *{{.Singular}}Relation) Order(query string, args ...string) {{.StructName}}Relation {
	if len(args) == 0 {
		args = []string{"ASC"}
	}

	q.orderValues = append(q.orderValues, orderDirection(&rel.Literal{Value: query}, args[0]))

	for i := 1; i <= len(args); i += 2 {
		q.orderValues = append(q.orderValues, orderDirection(&rel.Literal{Value: args[i]}, args[i+1]))
	}

	return q
}{{end}}

func orderDirection(e rel.Expr, direction string) rel.Expr {
	switch direction {
	case "ASC", "asc":
		return &rel.Ascending{
			Expr: e,
		}
	case "DESC", "desc":
		return &rel.Descending{
			Expr: e,
		}
	}

	panic("fail")
}
