package {{.Package}}

import (
	"context"
	"database/sql"
	"fmt"

  "github.com/pkg/errors"

	"bou.ke/orm/rel"
)

// DB is a general interface for sql.Conn, sql.DB, and sql.Tx
type DB interface {
	// ExecContext executes a query without returning any rows. The args are for any placeholder parameters in the query.
	ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error)

	// QueryContext executes a query that returns rows, typically a SELECT. The args are for any placeholder parameters in the query.
	QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)

	// QueryRowContext executes a query that is expected to return at most one row. QueryRowContext always returns a non-nil value. Errors are deferred until Row's Scan method is called. If the query selects no rows, the *Row's Scan will return ErrNoRows. Otherwise, the *Row's Scan scans the first selected row and discards the rest.
	QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row
}

var ErrNotFound error = errors.New("not found")

type Relation interface {
	// Count ...
	Count(ctx context.Context, db DB) (int64, error)

	// DeleteAll ...
	DeleteAll(ctx context.Context, db DB) (int64, error)

  // UpdateAll
  UpdateAll(ctx context.Context, db DB, query string, args ...interface{}) error
}

{{range .Tables}}
type {{.StructName}}Fields struct { {{range .Columns}}
	// {{.FieldName}} ...
	{{.FieldName}} {{.Type}}
{{end}}
}

type {{.StructName}} struct {
	{{.StructName}}Fields

  // If true, then this record exists in the DB
  persisted bool
  deleted   bool

  old {{.StructName}}Fields
}
{{$table := .}}{{range .HasMany}}
func (o *{{$table.StructName}}) {{.RelationName}}() {{.StructName}}Relation {
	return {{.RelationName}}.Where("{{$table.Singular}}_id = ?", o.ID)
}
{{end}}
{{$table := .}}{{range .BelongsTo}}
func (o *{{$table.StructName}}) {{.StructName}}(ctx context.Context, db DB) (*{{.StructName}}, error) {
	return {{.RelationName}}.Find(ctx, db, o.{{.StructName}}ID)
}
{{end}}

func (o *{{.StructName}}) Save(ctx context.Context, db DB) error {
  if o.deleted {
    return fmt.Errorf("record deleted")
  }

	if o.persisted {
		stmt := &rel.UpdateStatement{
			Table: {{.Name | printf "%q"}},
			Wheres: []rel.Expr{
        rel.Assignment{
          Field: "id",
          Value:  rel.BindParam{Value: o.old.ID},
        },
      },
		}

{{range .Columns}}
    if o.{{.FieldName}} != o.old.{{.FieldName}} {
      stmt.Values = append(stmt.Values, rel.Assignment{
        Field: {{.Name | printf "%q"}},
				Value: &rel.BindParam{
          Value: o.{{.FieldName}},
				},
      })
    }
{{end}}

		query, values := stmt.Build()
		_, err := db.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrapf(err, "executing %q", query)
		}
	} else {
		stmt := &rel.InsertStatement{
			Table: {{.Name | printf "%q"}},
		}
    {{range .Columns}}{{if eq .Name "id"}}
    if o.{{.FieldName}} != 0 { {{end}}
    stmt.Columns = append(stmt.Columns, {{.Name | printf "%q"}})
    stmt.Values = append(stmt.Values, &rel.BindParam{
        Value: o.{{.FieldName}},
    }){{if eq .Name "id"}}
    }{{end}}{{end}}

		query, values := stmt.Build()
		res, err := db.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrapf(err, "executing %q", query)
		}
		o.persisted = true

    if o.ID == 0 {
      o.ID, err = res.LastInsertId()
      if err != nil {
        return err
      }
    }
	}

  o.old = o.{{.StructName}}Fields

  return nil
}

func (o *{{.StructName}}) Delete(ctx context.Context, db DB) error {
	_, err := {{.RelationName}}.Where("id = ?", o.ID).DeleteAll(ctx, db)
	if err != nil {
		return err
	}
  o.deleted = true
	return err
}

func (o *{{.StructName}}) fieldPointerForColumn(column string) interface{} {
	switch column { {{range .Columns}}
	case {{.Name | printf "%q"}}:
		return &o.{{.FieldName}}{{end}}
	default:
		return nil
	}
}

func (o *{{.StructName}}) pointersForFields(fields []string) ([]interface{}, error) {
	pointers := make([]interface{}, len(fields))
	for i, field := range fields {
		ptr := o.fieldPointerForColumn(field)
		if ptr == nil {
			return nil, fmt.Errorf("unknown column %q", field)
		}
		pointers[i] = ptr
	}
	return pointers, nil
}

// assignField sets the field to the value.
// It panics if the field doesn't exist or the value is the wrong type.
func (o *{{.StructName}}) assignField(name string, value interface{}) {
	switch name { {{range .Columns}}
	case {{.Name | printf "%q"}}:
		o.{{.FieldName}} = value.({{.Type}}){{end}}
	default:
		panic("unknown field: " + name)
  }
}

type {{.StructName}}Relation interface {
  Relation

  // All ...
	All(ctx context.Context, db DB) ([]*{{.StructName}}, error)

  // Find ...
	Find(ctx context.Context, db DB, id int64) (*{{.StructName}}, error)

  // FindBy ...
	FindBy(ctx context.Context, db DB, query string, args ...interface{}) (*{{.StructName}}, error)

  // First ...
	First(ctx context.Context, db DB) (*{{.StructName}}, error)

  // Last ...
	Last(ctx context.Context, db DB) (*{{.StructName}}, error)

  // Limit ...
	Limit(limit int64) {{.StructName}}Relation

  // New creates a {{.StructName}} populated with the scope of the relation
  New() *{{.StructName}}

  // Offset ...
	Offset(offset int64) {{.StructName}}Relation

  // Order ...
	Order(query string, args ...string) {{.StructName}}Relation

  // Select ...
	Select(fields ...string) {{.StructName}}Relation

  // Take ...
	Take(ctx context.Context, db DB) (*{{.StructName}}, error)

  // Where ...
	Where(query string, args ...interface{}) {{.StructName}}Relation
}

// {{.RelationName}}Querying gives you access to {{.RelationName}}
type {{.RelationName}}Querying struct{}

// {{.RelationName}}Querying gives you access to {{.RelationName}}
var {{.RelationName}} {{.RelationName}}Querying

func (_ {{.RelationName}}Querying) Count(ctx context.Context, db DB) (int64, error) {
  return (&{{.Singular}}Relation{}).Count(ctx, db)
}

func (_ {{.RelationName}}Querying) DeleteAll(ctx context.Context, db DB) (int64, error) {
  return (&{{.Singular}}Relation{}).DeleteAll(ctx, db)
}

func (_ {{.RelationName}}Querying) UpdateAll(ctx context.Context, db DB, query string, args ...interface{}) error {
  return (&{{.Singular}}Relation{}).UpdateAll(ctx, db, query, args...)
}

func (_ {{.RelationName}}Querying) All(ctx context.Context, db DB) ([]*{{.StructName}}, error) {
  return (&{{.Singular}}Relation{}).All(ctx, db)
}

func (_ {{.RelationName}}Querying) Find(ctx context.Context, db DB, id int64) (*{{.StructName}}, error) {
  return (&{{.Singular}}Relation{}).Find(ctx, db, id)
}

func (_ {{.RelationName}}Querying) FindBy(ctx context.Context, db DB, query string, args ...interface{}) (*{{.StructName}}, error) {
  return (&{{.Singular}}Relation{}).FindBy(ctx, db, query, args...)
}

func (_ {{.RelationName}}Querying) First(ctx context.Context, db DB) (*{{.StructName}}, error) {
  return (&{{.Singular}}Relation{}).First(ctx, db)
}

func (_ {{.RelationName}}Querying) Last(ctx context.Context, db DB) (*{{.StructName}}, error) {
  return (&{{.Singular}}Relation{}).Last(ctx, db)
}

func (_ {{.RelationName}}Querying) Limit(limit int64) {{.StructName}}Relation {
  return (&{{.Singular}}Relation{}).Limit(limit)
}

func (_ {{.RelationName}}Querying) New() *{{.StructName}} {
  return (&{{.Singular}}Relation{}).New()
}

func (_ {{.RelationName}}Querying) Offset(offset int64) {{.StructName}}Relation {
  return (&{{.Singular}}Relation{}).Offset(offset)
}

func (_ {{.RelationName}}Querying) Order(query string, args ...string) {{.StructName}}Relation {
  return (&{{.Singular}}Relation{}).Order(query, args...)
}

func (_ {{.RelationName}}Querying) Select(fields ...string) {{.StructName}}Relation {
  return (&{{.Singular}}Relation{}).Select(fields...)
}

func (_ {{.RelationName}}Querying) Take(ctx context.Context, db DB) (*{{.StructName}}, error) {
  return (&{{.Singular}}Relation{}).Take(ctx, db)
}

func (_ {{.RelationName}}Querying) Where(query string, args ...interface{}) {{.StructName}}Relation {
  return (&{{.Singular}}Relation{}).Where(query, args...)
}

// FindBySQL returns all the {{.RelationName}} selected by the given query
func (_ {{.RelationName}}Querying) FindBySQL(ctx context.Context, db DB, query string, args ...interface{}) ([]*{{.StructName}}, error) {
	var {{.Name}} []*{{.StructName}}
  rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	row := &{{.StructName}}{}
  row.persisted = true
  fields, err := rows.Columns()
  if err != nil {
    return nil, err
  }
	ptrs, err := row.pointersForFields(fields)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		if err := rows.Scan(ptrs...); err != nil {
			return nil, err
		}

		o := &{{.StructName}}{}
		*o = *row

    o.old = o.{{.StructName}}Fields

		{{.Name}} = append({{.Name}}, o)
	}

	return {{.Name}}, rows.Err()
}

// CountBySQL executes the given query, giving a count
func (_ {{.RelationName}}Querying) CountBySQL(ctx context.Context, db DB, query string, args ...interface{}) (int64, error) {
  var count int64
	err := db.QueryRowContext(ctx, query, args...).Scan(&count)
  return count, err
}

type {{.Singular}}Relation struct {
	fields      []string
	whereClause []rel.Expr
	orderValues []rel.Expr
	limit       int64
	offset      int64
}

func (q *{{.Singular}}Relation) UpdateAll(ctx context.Context, db DB, query string, args ...interface{}) error {
  clauses, err := rel.ParseAssignment(query, args...)
  if err != nil {
    return err
  }

  stmt := &rel.UpdateStatement{
    Table:  {{.Name | printf "%q"}},
		Wheres: q.whereClause,
    Values: clauses,
  }

  query, values := stmt.Build()
  _, err = db.ExecContext(ctx, query, values...)
  return err
}

func (q *{{.Singular}}Relation) ToSQL() (query string, args []interface{}) {
	fields := q.columnFields()
	columns := make([]rel.Expr, 0, len(fields))
	for _, field := range fields {
		columns = append(columns, &rel.Literal{Text: field})
	}
	s := rel.SelectStatement{
		Columns: columns,
		Table:   {{.Name | printf "%q"}},
		Wheres:  q.whereClause,
		Orders:  q.orderValues,
		Limit:   q.limit,
		Offset:  q.offset,
	}
	return s.Build()
}

func (q *{{.Singular}}Relation) Count(ctx context.Context, db DB) (int64, error) {
  q.fields = []string{"COUNT(*)"}

	query, args := q.ToSQL()
  return {{.RelationName}}.CountBySQL(ctx, db, query, args...)
}

func (q *{{.Singular}}Relation) DeleteAll(ctx context.Context, db DB) (int64, error) {
	s := rel.DeleteStatement{
		Table:   "{{.Name}}",
		Wheres:  q.whereClause,
	}

	query, args := s.Build()

  res, err := db.ExecContext(ctx, query, args...)
  if err != nil {
		return 0, err
  }
  return res.RowsAffected()
}

func (q *{{.Singular}}Relation) Where(query string, args ...interface{}) {{.StructName}}Relation {
  clauses, err := rel.ParseAssignment(query, args...)

  // TODO(bouk): return error relation
  if err != nil {
    panic(err)
  }

  for _, clause := range clauses {
    q.whereClause = append(q.whereClause, clause)
  }

	return q
}

func (q *{{.Singular}}Relation) Limit(limit int64) {{.StructName}}Relation {
	q.limit = limit
	return q
}

func (q *{{.Singular}}Relation) New() *{{.StructName}} {
	o := &{{.StructName}}{}
	for _, w := range q.whereClause {
		if eq, ok := w.(rel.Assignment); ok {
			if bind, ok := eq.Value.(rel.BindParam); ok {
				o.assignField(eq.Field, bind.Value)
      }
    }
  }

	return o
}

func (q *{{.Singular}}Relation) Select(fields ...string) {{.StructName}}Relation {
	q.fields = append(q.fields, fields...)
	return q
}

func (q *{{.Singular}}Relation) Offset(offset int64) {{.StructName}}Relation {
	q.offset = offset
	return q
}

func (q *{{.Singular}}Relation) columnFields() []string {
	if q.fields == nil {
		return []string{ {{range .Columns}}
			"{{.Name}}",{{end}}
		}
	} else {
		return q.fields
	}
}

func (q *{{.Singular}}Relation) All(ctx context.Context, db DB) ([]*{{.StructName}}, error) {
  query, args := q.ToSQL()
  return {{.RelationName}}.FindBySQL(ctx, db, query, args...)
}

func (q *{{.Singular}}Relation) Take(ctx context.Context, db DB) (*{{.StructName}}, error) {
  q.limit = 1
  os, err := q.All(ctx, db)
  if err != nil {
    return nil, err
  }

  if len(os) == 0 {
    return nil, ErrNotFound
  }

  return os[0], nil
}

func (q *{{.Singular}}Relation) Find(ctx context.Context, db DB, id int64) (*{{.StructName}}, error) {
	return q.FindBy(ctx, db, "id = ?", id)
}

func (q *{{.Singular}}Relation) FindBy(ctx context.Context, db DB, query string, args ...interface{}) (*{{.StructName}}, error) {
	return q.Where(query, args...).Take(ctx, db)
}

func (q *{{.Singular}}Relation) First(ctx context.Context, db DB) (*{{.StructName}}, error) {
	return q.Order("id ASC").Take(ctx, db)
}

func (q *{{.Singular}}Relation) Last(ctx context.Context, db DB) (*{{.StructName}}, error) {
	return q.Order("id DESC").Take(ctx, db)
}

func (q *{{.Singular}}Relation) Order(query string, args ...string) {{.StructName}}Relation {
	q.orderValues = append(q.orderValues, &rel.Literal{Text: query})

	for i := 0; i < len(args); i ++ {
		q.orderValues = append(q.orderValues, &rel.Literal{Text: args[i]})
	}

	return q
}{{end}}
